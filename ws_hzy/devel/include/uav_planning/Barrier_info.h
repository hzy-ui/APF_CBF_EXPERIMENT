// Generated by gencpp from file uav_planning/Barrier_info.msg
// DO NOT EDIT!


#ifndef UAV_PLANNING_MESSAGE_BARRIER_INFO_H
#define UAV_PLANNING_MESSAGE_BARRIER_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_planning
{
template <class ContainerAllocator>
struct Barrier_info_
{
  typedef Barrier_info_<ContainerAllocator> Type;

  Barrier_info_()
    : t(0.0)
    , h(0.0)
    , gamma(0.0)
    , b(0.0)
    , u1(0.0)
    , u2(0.0)
    , x(0.0)
    , y(0.0)
    , b_t(0.0)  {
    }
  Barrier_info_(const ContainerAllocator& _alloc)
    : t(0.0)
    , h(0.0)
    , gamma(0.0)
    , b(0.0)
    , u1(0.0)
    , u2(0.0)
    , x(0.0)
    , y(0.0)
    , b_t(0.0)  {
  (void)_alloc;
    }



   typedef float _t_type;
  _t_type t;

   typedef float _h_type;
  _h_type h;

   typedef float _gamma_type;
  _gamma_type gamma;

   typedef float _b_type;
  _b_type b;

   typedef float _u1_type;
  _u1_type u1;

   typedef float _u2_type;
  _u2_type u2;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _b_t_type;
  _b_t_type b_t;





  typedef boost::shared_ptr< ::uav_planning::Barrier_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_planning::Barrier_info_<ContainerAllocator> const> ConstPtr;

}; // struct Barrier_info_

typedef ::uav_planning::Barrier_info_<std::allocator<void> > Barrier_info;

typedef boost::shared_ptr< ::uav_planning::Barrier_info > Barrier_infoPtr;
typedef boost::shared_ptr< ::uav_planning::Barrier_info const> Barrier_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_planning::Barrier_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_planning::Barrier_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_planning::Barrier_info_<ContainerAllocator1> & lhs, const ::uav_planning::Barrier_info_<ContainerAllocator2> & rhs)
{
  return lhs.t == rhs.t &&
    lhs.h == rhs.h &&
    lhs.gamma == rhs.gamma &&
    lhs.b == rhs.b &&
    lhs.u1 == rhs.u1 &&
    lhs.u2 == rhs.u2 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.b_t == rhs.b_t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_planning::Barrier_info_<ContainerAllocator1> & lhs, const ::uav_planning::Barrier_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uav_planning::Barrier_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_planning::Barrier_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_planning::Barrier_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_planning::Barrier_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_planning::Barrier_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_planning::Barrier_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_planning::Barrier_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a5469db9dded0c3a8fee01955f5cff1";
  }

  static const char* value(const ::uav_planning::Barrier_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a5469db9dded0c3ULL;
  static const uint64_t static_value2 = 0xa8fee01955f5cff1ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_planning::Barrier_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_planning/Barrier_info";
  }

  static const char* value(const ::uav_planning::Barrier_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_planning::Barrier_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 t\n"
"float32 h\n"
"float32 gamma\n"
"float32 b\n"
"float32 u1\n"
"float32 u2\n"
"float32 x\n"
"float32 y\n"
"float32 b_t\n"
;
  }

  static const char* value(const ::uav_planning::Barrier_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_planning::Barrier_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t);
      stream.next(m.h);
      stream.next(m.gamma);
      stream.next(m.b);
      stream.next(m.u1);
      stream.next(m.u2);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.b_t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Barrier_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_planning::Barrier_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_planning::Barrier_info_<ContainerAllocator>& v)
  {
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "gamma: ";
    Printer<float>::stream(s, indent + "  ", v.gamma);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
    s << indent << "u1: ";
    Printer<float>::stream(s, indent + "  ", v.u1);
    s << indent << "u2: ";
    Printer<float>::stream(s, indent + "  ", v.u2);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "b_t: ";
    Printer<float>::stream(s, indent + "  ", v.b_t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_PLANNING_MESSAGE_BARRIER_INFO_H
